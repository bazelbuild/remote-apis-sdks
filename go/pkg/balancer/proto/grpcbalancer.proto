syntax = "proto3";

package grpcbalancer;

message ApiConfig {
  // The channel pool configurations.
  ChannelPoolConfig channel_pool = 2;

  // The method configurations.
  repeated MethodConfig method = 1001;
}

// ChannelPoolConfig are options for configuring the channel pool.
// RPCs will be scheduled onto existing channels in the pool until all channels
// have <max_concurrent_streams_low_watermark> number of streams. At this point
// a new channel is spun out. Once <max_size> channels have been spun out and
// each has <max_concurrent_streams_low_watermark> streams, subsequent RPCs will
// hang until any of the in-flight RPCs is finished, freeing up a channel.
message ChannelPoolConfig {
  // The max number of channels in the pool.
  // Default value is 0, meaning 'unlimited' size.
  uint32 max_size = 1;

  // The idle timeout (seconds) of channels without bound affinity sessions.
  uint64 idle_timeout = 2;

  // The low watermark of max number of concurrent streams in a channel.
  // New channel will be created once it get hit, until we reach the max size of the channel pool.
  // Default value is 100. The valid range is [1, 100]. Any value outside the range will be ignored and the default value will be used.
  // Note: It is not recommended that users adjust this value, since a single channel should generally have no trouble managing the default (maximum) number of streams.
  uint32 max_concurrent_streams_low_watermark = 3;
}

message MethodConfig {
  // A fully qualified name of a gRPC method, or a wildcard pattern ending
  // with .*, such as foo.bar.A, foo.bar.*. Method configs are evaluated
  // sequentially, and the first one takes precedence.
  repeated string name = 1;

  // The channel affinity configurations.
  AffinityConfig affinity = 1001;
}

message AffinityConfig {
  enum Command {
    // The annotated method will be required to be bound to an existing session
    // to execute the RPC. The corresponding <affinity_key_field_path> will be
    // used to find the affinity key from the request message.
    BOUND = 0;
    // The annotated method will establish the channel affinity with the
    // channel which is used to execute the RPC. The corresponding
    // <affinity_key_field_path> will be used to find the affinity key from the
    // response message.
    BIND = 1;
    // The annotated method will remove the channel affinity with the
    // channel which is used to execute the RPC. The corresponding
    // <affinity_key_field_path> will be used to find the affinity key from the
    // request message.
    UNBIND = 2;
  }
  // The affinity command applies on the selected gRPC methods.
  Command command = 2;
  // The field path of the affinity key in the request/response message.
  // For example: "f.a", "f.b.d", etc.
  string affinity_key = 3;
}
